{
  "accounts": [
    {
      "docs": [
        "External types"
      ],
      "name": "Whirlpool",
      "type": {
        "fields": [
          {
            "name": "whirlpoolsConfig",
            "type": "publicKey"
          },
          {
            "name": "whirlpoolBump",
            "type": {
              "array": [
                "u8",
                1
              ]
            }
          },
          {
            "name": "tickSpacing",
            "type": "u16"
          },
          {
            "name": "tickSpacingSeed",
            "type": {
              "array": [
                "u8",
                2
              ]
            }
          },
          {
            "name": "feeRate",
            "type": "u16"
          },
          {
            "name": "protocolFeeRate",
            "type": "u16"
          },
          {
            "name": "liquidity",
            "type": "u128"
          },
          {
            "name": "sqrtPrice",
            "type": "u128"
          },
          {
            "name": "tickCurrentIndex",
            "type": "i32"
          },
          {
            "name": "protocolFeeOwedA",
            "type": "u64"
          },
          {
            "name": "protocolFeeOwedB",
            "type": "u64"
          },
          {
            "name": "tokenMintA",
            "type": "publicKey"
          },
          {
            "name": "tokenVaultA",
            "type": "publicKey"
          },
          {
            "name": "feeGrowthGlobalA",
            "type": "u128"
          },
          {
            "name": "tokenMintB",
            "type": "publicKey"
          },
          {
            "name": "tokenVaultB",
            "type": "publicKey"
          },
          {
            "name": "feeGrowthGlobalB",
            "type": "u128"
          },
          {
            "name": "rewardLastUpdatedTimestamp",
            "type": "u64"
          },
          {
            "name": "rewardInfos",
            "type": {
              "array": [
                {
                  "defined": "WhirlpoolRewardInfo"
                },
                3
              ]
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "Position",
      "type": {
        "fields": [
          {
            "name": "whirlpool",
            "type": "publicKey"
          },
          {
            "name": "positionMint",
            "type": "publicKey"
          },
          {
            "name": "liquidity",
            "type": "u128"
          },
          {
            "name": "tickLowerIndex",
            "type": "i32"
          },
          {
            "name": "tickUpperIndex",
            "type": "i32"
          },
          {
            "name": "feeGrowthCheckpointA",
            "type": "u128"
          },
          {
            "name": "feeOwedA",
            "type": "u64"
          },
          {
            "name": "feeGrowthCheckpointB",
            "type": "u128"
          },
          {
            "name": "feeOwedB",
            "type": "u64"
          },
          {
            "name": "rewardInfos",
            "type": {
              "array": [
                {
                  "defined": "PositionRewardInfo"
                },
                3
              ]
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "PoolState",
      "type": {
        "fields": [
          {
            "docs": [
              "Bump to identify PDA"
            ],
            "name": "bump",
            "type": "u8"
          },
          {
            "name": "ammConfig",
            "type": "publicKey"
          },
          {
            "name": "owner",
            "type": "publicKey"
          },
          {
            "docs": [
              "Token pair of the pool, where token_mint_0 address < token_mint_1 address"
            ],
            "name": "tokenMint0",
            "type": "publicKey"
          },
          {
            "name": "tokenMint1",
            "type": "publicKey"
          },
          {
            "docs": [
              "Token pair vault"
            ],
            "name": "tokenVault0",
            "type": "publicKey"
          },
          {
            "name": "tokenVault1",
            "type": "publicKey"
          },
          {
            "docs": [
              "observation account key"
            ],
            "name": "observationKey",
            "type": "publicKey"
          },
          {
            "docs": [
              "mint0 and mint1 decimals"
            ],
            "name": "mintDecimals0",
            "type": "u8"
          },
          {
            "name": "mintDecimals1",
            "type": "u8"
          },
          {
            "docs": [
              "The minimum number of ticks between initialized ticks"
            ],
            "name": "tickSpacing",
            "type": "u16"
          },
          {
            "docs": [
              "The currently in range liquidity available to the pool."
            ],
            "name": "liquidity",
            "type": "u128"
          },
          {
            "docs": [
              "The current price of the pool as a sqrt(token_1/token_0) Q64.64 value"
            ],
            "name": "sqrtPriceX64",
            "type": "u128"
          },
          {
            "docs": [
              "The current tick of the pool, i.e. according to the last tick transition that was run."
            ],
            "name": "tickCurrent",
            "type": "i32"
          },
          {
            "docs": [
              "the most-recently updated index of the observations array"
            ],
            "name": "observationIndex",
            "type": "u16"
          },
          {
            "name": "observationUpdateDuration",
            "type": "u16"
          },
          {
            "docs": [
              "The fee growth as a Q64.64 number, i.e. fees of token_0 and token_1 collected per",
              "unit of liquidity for the entire life of the pool."
            ],
            "name": "feeGrowthGlobal0X64",
            "type": "u128"
          },
          {
            "name": "feeGrowthGlobal1X64",
            "type": "u128"
          },
          {
            "docs": [
              "The amounts of token_0 and token_1 that are owed to the protocol."
            ],
            "name": "protocolFeesToken0",
            "type": "u64"
          },
          {
            "name": "protocolFeesToken1",
            "type": "u64"
          },
          {
            "docs": [
              "The amounts in and out of swap token_0 and token_1"
            ],
            "name": "swapInAmountToken0",
            "type": "u128"
          },
          {
            "name": "swapOutAmountToken1",
            "type": "u128"
          },
          {
            "name": "swapInAmountToken1",
            "type": "u128"
          },
          {
            "name": "swapOutAmountToken0",
            "type": "u128"
          },
          {
            "docs": [
              "Bitwise representation of the state of the pool",
              "bit0, 1: disable open position and increase liquidity, 0: normal",
              "bit1, 1: disable decrease liquidity, 0: normal",
              "bit2, 1: disable collect fee, 0: normal",
              "bit3, 1: disable collect reward, 0: normal",
              "bit4, 1: disable swap, 0: normal"
            ],
            "name": "status",
            "type": "u8"
          },
          {
            "docs": [
              "Leave blank for future use"
            ],
            "name": "padding",
            "type": {
              "array": [
                "u8",
                7
              ]
            }
          },
          {
            "name": "rewardInfos",
            "type": {
              "array": [
                {
                  "defined": "RewardInfo"
                },
                3
              ]
            }
          },
          {
            "docs": [
              "Packed initialized tick array state"
            ],
            "name": "tickArrayBitmap",
            "type": {
              "array": [
                "u64",
                16
              ]
            }
          },
          {
            "docs": [
              "except protocol_fee and fund_fee"
            ],
            "name": "totalFeesToken0",
            "type": "u64"
          },
          {
            "docs": [
              "except protocol_fee and fund_fee"
            ],
            "name": "totalFeesClaimedToken0",
            "type": "u64"
          },
          {
            "name": "totalFeesToken1",
            "type": "u64"
          },
          {
            "name": "totalFeesClaimedToken1",
            "type": "u64"
          },
          {
            "name": "fundFeesToken0",
            "type": "u64"
          },
          {
            "name": "fundFeesToken1",
            "type": "u64"
          },
          {
            "name": "openTime",
            "type": "u64"
          },
          {
            "name": "padding1",
            "type": {
              "array": [
                "u64",
                25
              ]
            }
          },
          {
            "name": "padding2",
            "type": {
              "array": [
                "u64",
                32
              ]
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "PersonalPositionState",
      "type": {
        "fields": [
          {
            "docs": [
              "Bump to identify PDA"
            ],
            "name": "bump",
            "type": "u8"
          },
          {
            "docs": [
              "Mint address of the tokenized position"
            ],
            "name": "nftMint",
            "type": "publicKey"
          },
          {
            "docs": [
              "The ID of the pool with which this token is connected"
            ],
            "name": "poolId",
            "type": "publicKey"
          },
          {
            "docs": [
              "The lower bound tick of the position"
            ],
            "name": "tickLowerIndex",
            "type": "i32"
          },
          {
            "docs": [
              "The upper bound tick of the position"
            ],
            "name": "tickUpperIndex",
            "type": "i32"
          },
          {
            "docs": [
              "The amount of liquidity owned by this position"
            ],
            "name": "liquidity",
            "type": "u128"
          },
          {
            "docs": [
              "The token_0 fee growth of the aggregate position as of the last action on the individual position"
            ],
            "name": "feeGrowthInside0LastX64",
            "type": "u128"
          },
          {
            "docs": [
              "The token_1 fee growth of the aggregate position as of the last action on the individual position"
            ],
            "name": "feeGrowthInside1LastX64",
            "type": "u128"
          },
          {
            "docs": [
              "The fees owed to the position owner in token_0, as of the last computation"
            ],
            "name": "tokenFeesOwed0",
            "type": "u64"
          },
          {
            "docs": [
              "The fees owed to the position owner in token_1, as of the last computation"
            ],
            "name": "tokenFeesOwed1",
            "type": "u64"
          },
          {
            "name": "rewardInfos",
            "type": {
              "array": [
                {
                  "defined": "PositionRewardInfo"
                },
                3
              ]
            }
          },
          {
            "name": "padding",
            "type": {
              "array": [
                "u64",
                8
              ]
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "ProtocolPositionState",
      "type": {
        "fields": [
          {
            "docs": [
              "Bump to identify PDA"
            ],
            "name": "bump",
            "type": "u8"
          },
          {
            "docs": [
              "The ID of the pool with which this token is connected"
            ],
            "name": "poolId",
            "type": "publicKey"
          },
          {
            "docs": [
              "The lower bound tick of the position"
            ],
            "name": "tickLowerIndex",
            "type": "i32"
          },
          {
            "docs": [
              "The upper bound tick of the position"
            ],
            "name": "tickUpperIndex",
            "type": "i32"
          },
          {
            "docs": [
              "The amount of liquidity owned by this position"
            ],
            "name": "liquidity",
            "type": "u128"
          },
          {
            "docs": [
              "The token_0 fee growth per unit of liquidity as of the last update to liquidity or fees owed"
            ],
            "name": "feeGrowthInside0LastX64",
            "type": "u128"
          },
          {
            "docs": [
              "The token_1 fee growth per unit of liquidity as of the last update to liquidity or fees owed"
            ],
            "name": "feeGrowthInside1LastX64",
            "type": "u128"
          },
          {
            "docs": [
              "The fees owed to the position owner in token_0"
            ],
            "name": "tokenFeesOwed0",
            "type": "u64"
          },
          {
            "docs": [
              "The fees owed to the position owner in token_1"
            ],
            "name": "tokenFeesOwed1",
            "type": "u64"
          },
          {
            "docs": [
              "The reward growth per unit of liquidity as of the last update to liquidity"
            ],
            "name": "rewardGrowthInside",
            "type": {
              "array": [
                "u128",
                3
              ]
            }
          },
          {
            "name": "padding",
            "type": {
              "array": [
                "u64",
                8
              ]
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "WhirlpoolStrategy",
      "type": {
        "fields": [
          {
            "name": "adminAuthority",
            "type": "publicKey"
          },
          {
            "name": "globalConfig",
            "type": "publicKey"
          },
          {
            "name": "baseVaultAuthority",
            "type": "publicKey"
          },
          {
            "name": "baseVaultAuthorityBump",
            "type": "u64"
          },
          {
            "name": "pool",
            "type": "publicKey"
          },
          {
            "name": "poolTokenVaultA",
            "type": "publicKey"
          },
          {
            "name": "poolTokenVaultB",
            "type": "publicKey"
          },
          {
            "name": "tickArrayLower",
            "type": "publicKey"
          },
          {
            "name": "tickArrayUpper",
            "type": "publicKey"
          },
          {
            "name": "position",
            "type": "publicKey"
          },
          {
            "name": "positionMint",
            "type": "publicKey"
          },
          {
            "name": "positionMetadata",
            "type": "publicKey"
          },
          {
            "name": "positionTokenAccount",
            "type": "publicKey"
          },
          {
            "name": "tokenAVault",
            "type": "publicKey"
          },
          {
            "name": "tokenBVault",
            "type": "publicKey"
          },
          {
            "name": "tokenAVaultAuthority",
            "type": "publicKey"
          },
          {
            "name": "tokenBVaultAuthority",
            "type": "publicKey"
          },
          {
            "name": "tokenAVaultAuthorityBump",
            "type": "u64"
          },
          {
            "name": "tokenBVaultAuthorityBump",
            "type": "u64"
          },
          {
            "name": "tokenAMint",
            "type": "publicKey"
          },
          {
            "name": "tokenBMint",
            "type": "publicKey"
          },
          {
            "name": "tokenAMintDecimals",
            "type": "u64"
          },
          {
            "name": "tokenBMintDecimals",
            "type": "u64"
          },
          {
            "name": "tokenAAmounts",
            "type": "u64"
          },
          {
            "name": "tokenBAmounts",
            "type": "u64"
          },
          {
            "name": "tokenACollateralId",
            "type": "u64"
          },
          {
            "name": "tokenBCollateralId",
            "type": "u64"
          },
          {
            "name": "scopePrices",
            "type": "publicKey"
          },
          {
            "name": "scopeProgram",
            "type": "publicKey"
          },
          {
            "name": "sharesMint",
            "type": "publicKey"
          },
          {
            "name": "sharesMintDecimals",
            "type": "u64"
          },
          {
            "name": "sharesMintAuthority",
            "type": "publicKey"
          },
          {
            "name": "sharesMintAuthorityBump",
            "type": "u64"
          },
          {
            "name": "sharesIssued",
            "type": "u64"
          },
          {
            "name": "status",
            "type": "u64"
          },
          {
            "name": "reward0Amount",
            "type": "u64"
          },
          {
            "name": "reward0Vault",
            "type": "publicKey"
          },
          {
            "name": "reward0CollateralId",
            "type": "u64"
          },
          {
            "name": "reward0Decimals",
            "type": "u64"
          },
          {
            "name": "reward1Amount",
            "type": "u64"
          },
          {
            "name": "reward1Vault",
            "type": "publicKey"
          },
          {
            "name": "reward1CollateralId",
            "type": "u64"
          },
          {
            "name": "reward1Decimals",
            "type": "u64"
          },
          {
            "name": "reward2Amount",
            "type": "u64"
          },
          {
            "name": "reward2Vault",
            "type": "publicKey"
          },
          {
            "name": "reward2CollateralId",
            "type": "u64"
          },
          {
            "name": "reward2Decimals",
            "type": "u64"
          },
          {
            "name": "depositCapUsd",
            "type": "u64"
          },
          {
            "name": "feesACumulative",
            "type": "u64"
          },
          {
            "name": "feesBCumulative",
            "type": "u64"
          },
          {
            "name": "reward0AmountCumulative",
            "type": "u64"
          },
          {
            "name": "reward1AmountCumulative",
            "type": "u64"
          },
          {
            "name": "reward2AmountCumulative",
            "type": "u64"
          },
          {
            "name": "depositCapUsdPerIxn",
            "type": "u64"
          },
          {
            "name": "withdrawalCapA",
            "type": {
              "defined": "WithdrawalCaps"
            }
          },
          {
            "name": "withdrawalCapB",
            "type": {
              "defined": "WithdrawalCaps"
            }
          },
          {
            "name": "maxPriceDeviationBps",
            "type": "u64"
          },
          {
            "name": "swapVaultMaxSlippageBps",
            "type": "u32"
          },
          {
            "name": "swapVaultMaxSlippageFromReferenceBps",
            "type": "u32"
          },
          {
            "name": "strategyType",
            "type": "u64"
          },
          {
            "name": "padding0",
            "type": "u64"
          },
          {
            "name": "withdrawFee",
            "type": "u64"
          },
          {
            "name": "feesFee",
            "type": "u64"
          },
          {
            "name": "reward0Fee",
            "type": "u64"
          },
          {
            "name": "reward1Fee",
            "type": "u64"
          },
          {
            "name": "reward2Fee",
            "type": "u64"
          },
          {
            "name": "positionTimestamp",
            "type": "u64"
          },
          {
            "name": "kaminoRewards",
            "type": {
              "array": [
                {
                  "defined": "KaminoRewardInfo"
                },
                3
              ]
            }
          },
          {
            "name": "strategyDex",
            "type": "u64"
          },
          {
            "name": "raydiumProtocolPositionOrBaseVaultAuthority",
            "type": "publicKey"
          },
          {
            "name": "allowDepositWithoutInvest",
            "type": "u64"
          },
          {
            "name": "raydiumPoolConfigOrBaseVaultAuthority",
            "type": "publicKey"
          },
          {
            "name": "depositBlocked",
            "type": "u8"
          },
          {
            "name": "creationStatus",
            "type": "u8"
          },
          {
            "name": "investBlocked",
            "type": "u8"
          },
          {
            "docs": [
              "share_calculation_method can be either DOLAR_BASED=0 or PROPORTION_BASED=1"
            ],
            "name": "shareCalculationMethod",
            "type": "u8"
          },
          {
            "name": "withdrawBlocked",
            "type": "u8"
          },
          {
            "name": "reservedFlag2",
            "type": "u8"
          },
          {
            "name": "localAdminBlocked",
            "type": "u8"
          },
          {
            "name": "flashVaultSwapAllowed",
            "type": "u8"
          },
          {
            "name": "referenceSwapPriceA",
            "type": {
              "defined": "Price"
            }
          },
          {
            "name": "referenceSwapPriceB",
            "type": {
              "defined": "Price"
            }
          },
          {
            "name": "isCommunity",
            "type": "u8"
          },
          {
            "name": "rebalanceType",
            "type": "u8"
          },
          {
            "name": "padding1",
            "type": {
              "array": [
                "u8",
                6
              ]
            }
          },
          {
            "name": "rebalanceRaw",
            "type": {
              "defined": "RebalanceRaw"
            }
          },
          {
            "name": "padding2",
            "type": {
              "array": [
                "u8",
                7
              ]
            }
          },
          {
            "name": "tokenAFeesFromRewardsCumulative",
            "type": "u64"
          },
          {
            "name": "tokenBFeesFromRewardsCumulative",
            "type": "u64"
          },
          {
            "name": "strategyLookupTable",
            "type": "publicKey"
          },
          {
            "name": "lastSwapUnevenStepTimestamp",
            "type": "u64"
          },
          {
            "name": "padding3",
            "type": "u64"
          },
          {
            "name": "padding4",
            "type": {
              "array": [
                "u128",
                25
              ]
            }
          },
          {
            "name": "padding5",
            "type": {
              "array": [
                "u128",
                32
              ]
            }
          },
          {
            "name": "padding6",
            "type": {
              "array": [
                "u128",
                32
              ]
            }
          },
          {
            "name": "padding7",
            "type": {
              "array": [
                "u128",
                32
              ]
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "GlobalConfig",
      "type": {
        "fields": [
          {
            "name": "emergencyMode",
            "type": "u64"
          },
          {
            "name": "blockDeposit",
            "type": "u64"
          },
          {
            "name": "blockInvest",
            "type": "u64"
          },
          {
            "name": "blockWithdraw",
            "type": "u64"
          },
          {
            "name": "blockCollectFees",
            "type": "u64"
          },
          {
            "name": "blockCollectRewards",
            "type": "u64"
          },
          {
            "name": "blockSwapRewards",
            "type": "u64"
          },
          {
            "name": "blockSwapUnevenVaults",
            "type": "u32"
          },
          {
            "name": "blockEmergencySwap",
            "type": "u32"
          },
          {
            "name": "feesBps",
            "type": "u64"
          },
          {
            "name": "scopeProgramId",
            "type": "publicKey"
          },
          {
            "name": "scopePriceId",
            "type": "publicKey"
          },
          {
            "name": "swapRewardsDiscountBps",
            "type": {
              "array": [
                "u64",
                256
              ]
            }
          },
          {
            "name": "actionsAuthority",
            "type": "publicKey"
          },
          {
            "name": "adminAuthority",
            "type": "publicKey"
          },
          {
            "name": "treasuryFeeVaults",
            "type": {
              "array": [
                "publicKey",
                256
              ]
            }
          },
          {
            "name": "tokenInfos",
            "type": "publicKey"
          },
          {
            "name": "blockLocalAdmin",
            "type": "u64"
          },
          {
            "name": "minPerformanceFeeBps",
            "type": "u64"
          },
          {
            "name": "padding",
            "type": {
              "array": [
                "u64",
                2042
              ]
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "CollateralInfos",
      "type": {
        "fields": [
          {
            "name": "infos",
            "type": {
              "array": [
                {
                  "defined": "CollateralInfo"
                },
                256
              ]
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "ScopeChainAccount",
      "type": {
        "fields": [
          {
            "name": "chainArray",
            "type": {
              "array": [
                {
                  "array": [
                    "u16",
                    4
                  ]
                },
                512
              ]
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "TermsSignature",
      "type": {
        "fields": [
          {
            "name": "signature",
            "type": {
              "array": [
                "u8",
                64
              ]
            }
          }
        ],
        "kind": "struct"
      }
    }
  ],
  "errors": [
    {
      "code": 6000,
      "msg": "Integer overflow",
      "name": "IntegerOverflow"
    },
    {
      "code": 6001,
      "msg": "Operation Forbidden",
      "name": "OperationForbidden"
    },
    {
      "code": 6002,
      "msg": "[DEPRECATED] Zero amount",
      "name": "ZeroAmount"
    },
    {
      "code": 6003,
      "msg": "Unable to deserialize account",
      "name": "UnableToDeserializeAccount"
    },
    {
      "code": 6004,
      "msg": "[DEPRECATED] Vault balance does not match for token A",
      "name": "VaultBalanceDoesNotMatchTokenA"
    },
    {
      "code": 6005,
      "msg": "[DEPRECATED] Vault balance does not match for token B",
      "name": "VaultBalanceDoesNotMatchTokenB"
    },
    {
      "code": 6006,
      "msg": "[DEPRECATED] Shares issued amount does not match",
      "name": "SharesIssuedAmountDoesNotMatch"
    },
    {
      "code": 6007,
      "msg": "Key is not present in global config",
      "name": "GlobalConfigKeyError"
    },
    {
      "code": 6008,
      "msg": "[DEPRECATED] System is in emergency mode",
      "name": "SystemInEmergencyMode"
    },
    {
      "code": 6009,
      "msg": "Global deposit is currently blocked",
      "name": "GlobalDepositBlocked"
    },
    {
      "code": 6010,
      "msg": "Global withdraw is currently blocked",
      "name": "GlobalWithdrawBlocked"
    },
    {
      "code": 6011,
      "msg": "Global invest is currently blocked",
      "name": "GlobalInvestBlocked"
    },
    {
      "code": 6012,
      "msg": "Out of range integral conversion attempted",
      "name": "OutOfRangeIntegralConversion"
    },
    {
      "code": 6013,
      "msg": "[DEPRECATED] Mathematical operation with overflow",
      "name": "MathOverflow"
    },
    {
      "code": 6014,
      "msg": "Unable to withdraw more liquidity than available in position",
      "name": "TooMuchLiquidityToWithdraw"
    },
    {
      "code": 6015,
      "msg": "Deposit amounts must be greater than zero",
      "name": "DepositAmountsZero"
    },
    {
      "code": 6016,
      "msg": "Number of shares to withdraw must be greater than zero",
      "name": "SharesZero"
    },
    {
      "code": 6017,
      "msg": "Strategy not active",
      "name": "StrategyNotActive"
    },
    {
      "code": 6018,
      "msg": "There are unharvested gains",
      "name": "UnharvestedAmounts"
    },
    {
      "code": 6019,
      "msg": "Reward mapping incorrect",
      "name": "InvalidRewardMapping"
    },
    {
      "code": 6020,
      "msg": "Reward index incorrect",
      "name": "InvalidRewardIndex"
    },
    {
      "code": 6021,
      "msg": "Cannot use uninitialized reward vault",
      "name": "OwnRewardUninitialized"
    },
    {
      "code": 6022,
      "msg": "Price is not valid",
      "name": "PriceNotValid"
    },
    {
      "code": 6023,
      "msg": "Must provide almost equal amounts of tokens",
      "name": "SwapRewardImbalanced"
    },
    {
      "code": 6024,
      "msg": "Swap reward is zero or less than requested",
      "name": "SwapRewardTooSmall"
    },
    {
      "code": 6025,
      "msg": "Swap reward is less than what user requested as minimum",
      "name": "SwapRewardLessThanRequested"
    },
    {
      "code": 6026,
      "msg": "Swap reward is less than minimum acceptable",
      "name": "SwapRewardLessThanMinimum"
    },
    {
      "code": 6027,
      "msg": "Wrong discriminator",
      "name": "WrongDiscriminator"
    },
    {
      "code": 6028,
      "msg": "Wrong mint",
      "name": "WrongMint"
    },
    {
      "code": 6029,
      "msg": "Wrong vault",
      "name": "WrongVault"
    },
    {
      "code": 6030,
      "msg": "Swap amounts must be greater than zero",
      "name": "SwapAmountsZero"
    },
    {
      "code": 6031,
      "msg": "Price too old",
      "name": "PriceTooOld"
    },
    {
      "code": 6032,
      "msg": "Cannot invest zero amount",
      "name": "CannotInvestZeroAmount"
    },
    {
      "code": 6033,
      "msg": "Cannot have zero investable amount",
      "name": "MaxInvestableZero"
    },
    {
      "code": 6034,
      "msg": "Collect fees is blocked",
      "name": "CollectFeesBlocked"
    },
    {
      "code": 6035,
      "msg": "Collect rewards is blocked",
      "name": "CollectRewardsBlocked"
    },
    {
      "code": 6036,
      "msg": "Swap rewards is blocked",
      "name": "SwapRewardsBlocked"
    },
    {
      "code": 6037,
      "msg": "Reward collateral ID is incorrect for strategy",
      "name": "WrongRewardCollateralID"
    },
    {
      "code": 6038,
      "msg": "Position account doesnt match internal records",
      "name": "InvalidPositionAccount"
    },
    {
      "code": 6039,
      "msg": "Scope account could not be deserialized",
      "name": "CouldNotDeserializeScope"
    },
    {
      "code": 6040,
      "msg": "[DEPRECATED] Collateral ID invalid for strategy",
      "name": "WrongCollateralID"
    },
    {
      "code": 6041,
      "msg": "Collaterals exceed deposit cap",
      "name": "CollateralTokensExceedDepositCap"
    },
    {
      "code": 6042,
      "msg": "Swap uneven vaults is blocked",
      "name": "SwapUnevenVaultsBlocked"
    },
    {
      "code": 6043,
      "msg": "Cannot swap as vaults are already balanced",
      "name": "VaultsAreAlreadyBalanced"
    },
    {
      "code": 6044,
      "msg": "Cannot swap uneven vaults when position is out of range",
      "name": "CannotSwapUnevenOutOfRange"
    },
    {
      "code": 6045,
      "msg": "Cannot divide by zero",
      "name": "DivideByZero"
    },
    {
      "code": 6046,
      "msg": "[DEPRECATED] Delta A too large",
      "name": "DeltaATooLarge"
    },
    {
      "code": 6047,
      "msg": "[DEPRECATED] Delta B too large",
      "name": "DeltaBTooLarge"
    },
    {
      "code": 6048,
      "msg": "[DEPRECATED] Cannot executive withdraw zero amount",
      "name": "CannotExecutiveWithdrawZeroAmount"
    },
    {
      "code": 6049,
      "msg": "Cannot withdraw zero amount",
      "name": "CannotWithdrawZeroAmount"
    },
    {
      "code": 6050,
      "msg": "[DEPRECATED] Cannot collect fees on zero liquidity position",
      "name": "CannotCollectFeesOnZeroLiquidityPosition"
    },
    {
      "code": 6051,
      "msg": "Cannot deposit inactive position",
      "name": "StrategyNotActiveWhenDepositing"
    },
    {
      "code": 6052,
      "msg": "Cannot open position with existing opened position",
      "name": "StrategyNotActiveWhenOpeningPosition"
    },
    {
      "code": 6053,
      "msg": "Collaterals exceed deposit ixn cap",
      "name": "CollateralTokensExceedDepositCapPerIxn"
    },
    {
      "code": 6054,
      "msg": "Cannot deposit when strategy out of range",
      "name": "CannotDepositOutOfRange"
    },
    {
      "code": 6055,
      "msg": "Cannot invest when strategy out of range",
      "name": "CannotInvestOutOfRange"
    },
    {
      "code": 6056,
      "msg": "Withdrawal cap is reached",
      "name": "WithdrawalCapReached"
    },
    {
      "code": 6057,
      "msg": "Timestamp decrease",
      "name": "TimestampDecrease"
    },
    {
      "code": 6058,
      "msg": "CPI not allowed",
      "name": "CPINotAllowed"
    },
    {
      "code": 6059,
      "msg": "Cannot use orca price as it is too different from scope price",
      "name": "OrcaPriceTooDifferentFromScope"
    },
    {
      "code": 6060,
      "msg": "Lower tick larger than upper tick",
      "name": "LowerTickLargerThanUpperTick"
    },
    {
      "code": 6061,
      "msg": "Lower tick is lower than the minimal supported low tick",
      "name": "LowerTickTooLow"
    },
    {
      "code": 6062,
      "msg": "Upper tick is larger than the maximum supported tick",
      "name": "UpperTickTooLarge"
    },
    {
      "code": 6063,
      "msg": "Lower tick is not a multiple of tick spacing",
      "name": "LowerTickNotMultipleOfTickSpacing"
    },
    {
      "code": 6064,
      "msg": "Upper tick is not a multiple of tick spacing",
      "name": "UpperTickNotMultipleOfTickSpacing"
    },
    {
      "code": 6065,
      "msg": "Cannot change admin authority",
      "name": "CannotChangeAdminAuthority"
    },
    {
      "code": 6066,
      "msg": "Cannot resize with smaller new size",
      "name": "CannotResizeAccount"
    },
    {
      "code": 6067,
      "msg": "Scope chain update failed",
      "name": "ScopeChainUpdateFailed"
    },
    {
      "code": 6068,
      "msg": "Price too divergent from twap",
      "name": "PriceTooDivergentFromTwap"
    },
    {
      "code": 6069,
      "msg": "[DEPRECATED] Can not override the existing reward",
      "name": "ExistingRewardOverride"
    },
    {
      "code": 6070,
      "msg": "Kamino reward id exceeds the available slots",
      "name": "WrongKaminoRewardId"
    },
    {
      "code": 6071,
      "msg": "Kamino reward is not initialized",
      "name": "KaminoRewardNotExist"
    },
    {
      "code": 6072,
      "msg": "Kamino reward is already initialized",
      "name": "KaminoRewardAlreadyExists"
    },
    {
      "code": 6073,
      "msg": "Kamino collateral is not valid",
      "name": "KaminoCollateralNotValid"
    },
    {
      "code": 6074,
      "msg": "[DEPRECATED] Expected kamino reward is bigger then the available amount within the vault",
      "name": "KaminoRewardExceedsAvailableAmount"
    },
    {
      "code": 6075,
      "msg": "Swap uneven vaults result in the opposite unbalance of the vaults",
      "name": "SwapUnevenVaultsOvershoot"
    },
    {
      "code": 6076,
      "msg": "Bps parameter passed to instruction is not in range",
      "name": "BpsNotInRange"
    },
    {
      "code": 6077,
      "msg": "Emergency Swap is blocked",
      "name": "EmergencySwapBlocked"
    },
    {
      "code": 6078,
      "msg": "Strategy is expected to be frozen for this operation",
      "name": "StrategyNotFrozen"
    },
    {
      "code": 6079,
      "msg": "Token left in vault post swap are lower than expected",
      "name": "UnexpectedTokenAmountsPostSwap"
    },
    {
      "code": 6080,
      "msg": "Account doesnt belong to the DEX",
      "name": "AccountNotBelongToDEX"
    },
    {
      "code": 6081,
      "msg": "Wrong DEX program ID",
      "name": "WrongDEXProgramID"
    },
    {
      "code": 6082,
      "msg": "Cannot use uninitialized orca reward vault",
      "name": "OrcaRewardUninitialized"
    },
    {
      "code": 6083,
      "msg": "Invalid admin authority",
      "name": "InvalidAdminAuthority"
    },
    {
      "code": 6084,
      "msg": "Token price is bigger than heuristic",
      "name": "PriceIsBiggerThanHeuristic"
    },
    {
      "code": 6085,
      "msg": "Token price is lower than heuristic",
      "name": "PriceIsLowerThanHeuristic"
    },
    {
      "code": 6086,
      "msg": "Account different than expected",
      "name": "AccountDifferentThanExpected"
    },
    {
      "code": 6087,
      "msg": "Swap amount below the minimum value",
      "name": "SwapAmountsTooSmall"
    },
    {
      "code": 6088,
      "msg": "Invalid dex program id",
      "name": "InvalidDexProgramId"
    },
    {
      "code": 6089,
      "msg": "Strategy deposit is currently blocked",
      "name": "StrategyDepositBlocked"
    },
    {
      "code": 6090,
      "msg": "Strategy invest is currently blocked",
      "name": "StrategyInvestBlocked"
    },
    {
      "code": 6091,
      "msg": "Strategy withdraw is currently blocked",
      "name": "StrategyWithdrawBlocked"
    },
    {
      "code": 6092,
      "msg": "Vault swap cant be performed in the required direction",
      "name": "WrongSwapVaultDirection"
    },
    {
      "code": 6093,
      "msg": "Provided amount for vault swap is over the limit",
      "name": "SwapVaultsTooBig"
    },
    {
      "code": 6094,
      "msg": "Token out for cash based vault swap is below minimum expected",
      "name": "SwapVaultsCashOutputBelowMinimum"
    },
    {
      "code": 6095,
      "msg": "Flash ixs initiated without the closing ix in the transaction",
      "name": "FlashIxsNotEnded"
    },
    {
      "code": 6096,
      "msg": "Some unexpected instructions are present in the tx. Either before or after the flash ixs, or some ix target the same program between",
      "name": "FlashTxWithUnexpectedIxs"
    },
    {
      "code": 6097,
      "msg": "Some accounts differ between the two flash ixs",
      "name": "FlashIxsAccountMismatch"
    },
    {
      "code": 6098,
      "msg": "A scope ix is present in a flash tx",
      "name": "FlashIxsIncludeScope"
    },
    {
      "code": 6099,
      "msg": "Flash vault swap is blocked on this strategy",
      "name": "FlashVaultSwapBlocked"
    },
    {
      "code": 6100,
      "msg": "Unexpected amount of tokens in ata prior flash vault swap (wrong amount_to_leave_to_user)",
      "name": "FlashVaultSwapWrongAmountToLeave"
    },
    {
      "code": 6101,
      "msg": "Deposit amount less than minimal allowed",
      "name": "DepositLessThanMinimum"
    },
    {
      "code": 6102,
      "msg": "Cannot deposit without invest",
      "name": "DepositWithoutInvestDisallowed"
    },
    {
      "code": 6103,
      "msg": "Invalid Scope Chain",
      "name": "InvalidScopeChain"
    },
    {
      "code": 6104,
      "msg": "Invalid Scope TWAP Chain",
      "name": "InvalidScopeTWAPChain"
    },
    {
      "code": 6105,
      "msg": "Existent position has liquidity, new position creation is forbidden",
      "name": "PositionHasRemainingLiquidity"
    },
    {
      "code": 6106,
      "msg": "Deposit is not allowed as pool is rebalancing",
      "name": "PoolRebalancing"
    },
    {
      "code": 6107,
      "msg": "Permissionless rebalancing is disabled",
      "name": "PermissionlessRebalancingDisabled"
    },
    {
      "code": 6108,
      "msg": "Only the owner of the strategy can manually rebalance it",
      "name": "ManualRebalanceInvalidOwner"
    },
    {
      "code": 6109,
      "msg": "Invalid rebalance type for the strategy",
      "name": "InvalidRebalanceType"
    },
    {
      "code": 6110,
      "msg": "No rebalance necessary based on current rebalance type/parameters",
      "name": "NoRebalanceNecessary"
    },
    {
      "code": 6111,
      "msg": "The given tick arrays do not match the rebalance result",
      "name": "TickArraysDoNotMatchRebalance"
    },
    {
      "code": 6112,
      "msg": "Expected strategy position to be initialized",
      "name": "StrategyPositionNotValid"
    },
    {
      "code": 6113,
      "msg": "Rebalance state could not be deserialized",
      "name": "CouldNotDeserializeRebalanceState"
    },
    {
      "code": 6114,
      "msg": "Rebalance state could not be serialized",
      "name": "CouldNotSerializeRebalanceState"
    },
    {
      "code": 6115,
      "msg": "Rebalance params could not be deserialized",
      "name": "CouldNotDeserializeRebalanceParams"
    },
    {
      "code": 6116,
      "msg": "Deposit is not allowed as token amounts are not enough to match our holdings ratio",
      "name": "NotEnoughTokensForRatio"
    },
    {
      "code": 6117,
      "msg": "The provided amounts are too small",
      "name": "AmountsRepresentZeroShares"
    },
    {
      "code": 6118,
      "msg": "Rouding errors exceed the maximal loss tolerance",
      "name": "MaxLossExceeded"
    },
    {
      "code": 6119,
      "msg": "Reward does not match strategy token",
      "name": "RewardNotStrategyToken"
    },
    {
      "code": 6120,
      "msg": "Decimal to u64 conversion failed",
      "name": "DecimalToU64ConversionFailed"
    },
    {
      "code": 6121,
      "msg": "Decimal operation failed",
      "name": "DecimalOperationFailed"
    },
    {
      "code": 6122,
      "msg": "Deposit is not allowed as the strategy is not fully invested in the pool ",
      "name": "VaultBalancesCausesWrongSharesIssuance"
    },
    {
      "code": 6123,
      "msg": "Token cannot be used in strategy creation",
      "name": "TokenDisabled"
    },
    {
      "code": 6124,
      "msg": "Invalid reference price type",
      "name": "InvalidReferencePriceType"
    },
    {
      "code": 6125,
      "msg": "Token amount to be swapped is not enough",
      "name": "TokenToSwapNotEnough"
    },
    {
      "code": 6126,
      "msg": "Token amount in ata is different than the expected amount",
      "name": "TokenAccountBalanceMismatch"
    },
    {
      "code": 6127,
      "msg": "Unexpected programID for prerequisite ix",
      "name": "UnexpectedProgramIdForPrerequisiteIx"
    },
    {
      "code": 6128,
      "msg": "Got an error from the dex specific function while computing the fees/rewards update",
      "name": "ComputeFeesAndRewardsUpdateError"
    },
    {
      "code": 6129,
      "msg": "There must be no shares issued when closing a strategy",
      "name": "SharesNotZero"
    },
    {
      "code": 6130,
      "msg": "Invalid Scope staking rate Chain",
      "name": "InvalidScopeStakingRateChain"
    },
    {
      "code": 6131,
      "msg": "Staking rate (provided by Scope) is not valid",
      "name": "StakingRateNotValid"
    },
    {
      "code": 6132,
      "msg": "Decimal to u128 conversion failed",
      "name": "DecimalToU128ConversionFailed"
    },
    {
      "code": 6133,
      "msg": "Decimal sqrt on negative number",
      "name": "DecimalNegativeSqrtRoot"
    },
    {
      "code": 6134,
      "msg": "Drifting strategy is moving in the opposite direction",
      "name": "DriftingOppositeDirection"
    }
  ],
  "instructions": [
    {
      "accounts": [
        {
          "isMut": true,
          "isSigner": true,
          "name": "adminAuthority"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "strategy"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "globalConfig"
        },
        {
          "docs": [
            "Program owner also checked."
          ],
          "isMut": false,
          "isSigner": false,
          "name": "pool"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tokenAMint"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tokenBMint"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tokenAVault"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tokenBVault"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "baseVaultAuthority"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "sharesMint"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "sharesMintAuthority"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "scopePriceId"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "scopeProgramId"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tokenInfos"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "systemProgram"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "rent"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tokenProgram"
        }
      ],
      "args": [
        {
          "name": "strategyType",
          "type": "u64"
        },
        {
          "name": "tokenACollateralId",
          "type": "u64"
        },
        {
          "name": "tokenBCollateralId",
          "type": "u64"
        }
      ],
      "name": "initializeStrategy"
    },
    {
      "accounts": [
        {
          "isMut": true,
          "isSigner": true,
          "name": "adminAuthority"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "strategy"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "globalConfig"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "rewardMint"
        },
        {
          "isMut": true,
          "isSigner": true,
          "name": "rewardVault"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tokenInfos"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "baseVaultAuthority"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "systemProgram"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "rent"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tokenProgram"
        }
      ],
      "args": [
        {
          "name": "kaminoRewardIndex",
          "type": "u64"
        },
        {
          "name": "collateralToken",
          "type": "u64"
        }
      ],
      "name": "initializeKaminoReward"
    },
    {
      "accounts": [
        {
          "isMut": true,
          "isSigner": true,
          "name": "adminAuthority"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "strategy"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "rewardMint"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "rewardVault"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "baseVaultAuthority"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "rewardAta"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tokenProgram"
        }
      ],
      "args": [
        {
          "name": "kaminoRewardIndex",
          "type": "u64"
        },
        {
          "name": "amount",
          "type": "u64"
        }
      ],
      "name": "addKaminoRewards"
    },
    {
      "accounts": [
        {
          "isMut": true,
          "isSigner": true,
          "name": "adminAuthority"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "globalConfig"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "systemProgram"
        }
      ],
      "args": [],
      "name": "initializeGlobalConfig"
    },
    {
      "accounts": [
        {
          "isMut": true,
          "isSigner": true,
          "name": "adminAuthority"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "globalConfig"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "collInfo"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "systemProgram"
        }
      ],
      "args": [],
      "name": "initializeCollateralInfo"
    },
    {
      "accounts": [
        {
          "isMut": true,
          "isSigner": true,
          "name": "adminAuthority"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "globalConfig"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tokenInfos"
        }
      ],
      "args": [
        {
          "name": "index",
          "type": "u64"
        },
        {
          "name": "mode",
          "type": "u64"
        },
        {
          "name": "value",
          "type": {
            "array": [
              "u8",
              32
            ]
          }
        }
      ],
      "name": "updateCollateralInfo"
    },
    {
      "accounts": [
        {
          "isMut": true,
          "isSigner": true,
          "name": "adminAuthority"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "strategy"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "globalConfig"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "sharesMint"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "sharesMetadata"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "sharesMintAuthority"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "systemProgram"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "rent"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "metadataProgram"
        }
      ],
      "args": [
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "symbol",
          "type": "string"
        },
        {
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "initializeSharesMetadata"
    },
    {
      "accounts": [
        {
          "isMut": true,
          "isSigner": true,
          "name": "adminAuthority"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "strategy"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "globalConfig"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "sharesMint"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "sharesMetadata"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "sharesMintAuthority"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "metadataProgram"
        }
      ],
      "args": [
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "symbol",
          "type": "string"
        },
        {
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "updateSharesMetadata"
    },
    {
      "accounts": [
        {
          "isMut": false,
          "isSigner": true,
          "name": "adminAuthority"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "globalConfig"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "systemProgram"
        }
      ],
      "args": [
        {
          "name": "key",
          "type": "u16"
        },
        {
          "name": "index",
          "type": "u16"
        },
        {
          "name": "value",
          "type": {
            "array": [
              "u8",
              32
            ]
          }
        }
      ],
      "name": "updateGlobalConfig"
    },
    {
      "accounts": [
        {
          "isMut": true,
          "isSigner": true,
          "name": "signer"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "globalConfig"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "feeMint"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "treasuryFeeVault"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "treasuryFeeVaultAuthority"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tokenInfos"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "systemProgram"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "rent"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tokenProgram"
        }
      ],
      "args": [
        {
          "name": "collateralId",
          "type": "u16"
        }
      ],
      "name": "updateTreasuryFeeVault"
    },
    {
      "accounts": [
        {
          "isMut": false,
          "isSigner": true,
          "name": "adminAuthority"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "newAccount"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "strategy"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "globalConfig"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "systemProgram"
        }
      ],
      "args": [
        {
          "name": "mode",
          "type": "u16"
        },
        {
          "name": "value",
          "type": {
            "array": [
              "u8",
              128
            ]
          }
        }
      ],
      "name": "updateStrategyConfig"
    },
    {
      "accounts": [
        {
          "isMut": true,
          "isSigner": true,
          "name": "payer"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "strategy"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "globalConfig"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "pool"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "rewardMint"
        },
        {
          "isMut": true,
          "isSigner": true,
          "name": "rewardVault"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "baseVaultAuthority"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tokenInfos"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "systemProgram"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "rent"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tokenProgram"
        }
      ],
      "args": [
        {
          "name": "rewardIndex",
          "type": "u8"
        },
        {
          "name": "collateralToken",
          "type": "u8"
        }
      ],
      "name": "updateRewardMapping"
    },
    {
      "accounts": [
        {
          "isMut": true,
          "isSigner": true,
          "name": "adminAuthority"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "strategy"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "globalConfig"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "pool"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tickArrayLower"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tickArrayUpper"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "baseVaultAuthority"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "position"
        },
        {
          "isMut": true,
          "isSigner": true,
          "name": "positionMint"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "positionMetadataAccount"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "positionTokenAccount"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "rent"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "system"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tokenProgram"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "associatedTokenProgram"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "poolProgram"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "oldTickArrayLowerOrBaseVaultAuthority"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "oldTickArrayUpperOrBaseVaultAuthority"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "oldPositionOrBaseVaultAuthority"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "oldPositionMintOrBaseVaultAuthority"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "oldPositionTokenAccountOrBaseVaultAuthority"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tokenAVault"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tokenBVault"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "poolTokenVaultA"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "poolTokenVaultB"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "scopePrices"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tokenInfos"
        }
      ],
      "args": [
        {
          "name": "tickLowerIndex",
          "type": "i64"
        },
        {
          "name": "tickUpperIndex",
          "type": "i64"
        },
        {
          "name": "bump",
          "type": "u8"
        }
      ],
      "name": "openLiquidityPosition"
    },
    {
      "accounts": [
        {
          "isMut": true,
          "isSigner": true,
          "name": "adminAuthority"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "strategy"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "oldPositionOrBaseVaultAuthority"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "oldPositionMintOrBaseVaultAuthority"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "oldPositionTokenAccountOrBaseVaultAuthority"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tokenAVault"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tokenBVault"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "userTokenAAta"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "userTokenBAta"
        },
        {
          "docs": [
            "If rewards are uninitialized, pass this as strategy."
          ],
          "isMut": true,
          "isSigner": false,
          "name": "reward0Vault"
        },
        {
          "docs": [
            "If rewards are uninitialized, pass this as strategy."
          ],
          "isMut": true,
          "isSigner": false,
          "name": "reward1Vault"
        },
        {
          "docs": [
            "If rewards are uninitialized, pass this as strategy."
          ],
          "isMut": true,
          "isSigner": false,
          "name": "reward2Vault"
        },
        {
          "docs": [
            "If rewards are uninitialized, pass this as strategy."
          ],
          "isMut": true,
          "isSigner": false,
          "name": "kaminoReward0Vault"
        },
        {
          "docs": [
            "If rewards are uninitialized, pass this as strategy."
          ],
          "isMut": true,
          "isSigner": false,
          "name": "kaminoReward1Vault"
        },
        {
          "docs": [
            "If rewards are uninitialized, pass this as strategy."
          ],
          "isMut": true,
          "isSigner": false,
          "name": "kaminoReward2Vault"
        },
        {
          "docs": [
            "If rewards are uninitialized, pass this as strategy."
          ],
          "isMut": true,
          "isSigner": false,
          "name": "userReward0Ata"
        },
        {
          "docs": [
            "If rewards are uninitialized, pass this as strategy."
          ],
          "isMut": true,
          "isSigner": false,
          "name": "userReward1Ata"
        },
        {
          "docs": [
            "If rewards are uninitialized, pass this as strategy."
          ],
          "isMut": true,
          "isSigner": false,
          "name": "userReward2Ata"
        },
        {
          "docs": [
            "If rewards are uninitialized, pass this as strategy."
          ],
          "isMut": true,
          "isSigner": false,
          "name": "userKaminoReward0Ata"
        },
        {
          "docs": [
            "If rewards are uninitialized, pass this as strategy."
          ],
          "isMut": true,
          "isSigner": false,
          "name": "userKaminoReward1Ata"
        },
        {
          "docs": [
            "If rewards are uninitialized, pass this as strategy."
          ],
          "isMut": true,
          "isSigner": false,
          "name": "userKaminoReward2Ata"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "baseVaultAuthority"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "poolProgram"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tokenProgram"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "system"
        }
      ],
      "args": [],
      "name": "closeStrategy"
    },
    {
      "accounts": [
        {
          "isMut": true,
          "isSigner": true,
          "name": "user"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "strategy"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "globalConfig"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "pool"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "position"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tokenAVault"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tokenBVault"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "baseVaultAuthority"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tokenAAta"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tokenBAta"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tokenAMint"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tokenBMint"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "userSharesAta"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "sharesMint"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "sharesMintAuthority"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "scopePrices"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tokenInfos"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tokenProgram"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "instructionSysvarAccount"
        }
      ],
      "args": [
        {
          "name": "tokenMaxA",
          "type": "u64"
        },
        {
          "name": "tokenMaxB",
          "type": "u64"
        }
      ],
      "name": "deposit"
    },
    {
      "accounts": [
        {
          "isMut": true,
          "isSigner": true,
          "name": "payer"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "strategy"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "globalConfig"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tokenAVault"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tokenBVault"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "baseVaultAuthority"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "pool"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tokenProgram"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "position"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "raydiumProtocolPositionOrBaseVaultAuthority"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "positionTokenAccount"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "poolTokenVaultA"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "poolTokenVaultB"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tickArrayLower"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tickArrayUpper"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "scopePrices"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tokenInfos"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "poolProgram"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "instructionSysvarAccount"
        }
      ],
      "args": [],
      "name": "invest"
    },
    {
      "accounts": [
        {
          "isMut": true,
          "isSigner": true,
          "name": "user"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "strategy"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "globalConfig"
        },
        {
          "docs": [
            "check that the pool is owned either by orca or by raydium"
          ],
          "isMut": true,
          "isSigner": false,
          "name": "pool"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "position"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "raydiumProtocolPositionOrBaseVaultAuthority"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "positionTokenAccount"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tokenAVault"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tokenBVault"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "poolTokenVaultA"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "poolTokenVaultB"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tickArrayLower"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tickArrayUpper"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "baseVaultAuthority"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tokenAAta"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tokenBAta"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tokenAMint"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tokenBMint"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "userSharesAta"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "sharesMint"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "sharesMintAuthority"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "scopePrices"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tokenInfos"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tokenProgram"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "poolProgram"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "instructionSysvarAccount"
        }
      ],
      "args": [
        {
          "name": "tokenMaxA",
          "type": "u64"
        },
        {
          "name": "tokenMaxB",
          "type": "u64"
        }
      ],
      "name": "depositAndInvest"
    },
    {
      "accounts": [
        {
          "isMut": true,
          "isSigner": true,
          "name": "user"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "strategy"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "globalConfig"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "pool"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "position"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "raydiumProtocolPositionOrBaseVaultAuthority"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tickArrayLower"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tickArrayUpper"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tokenAVault"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tokenBVault"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "baseVaultAuthority"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "poolTokenVaultA"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "poolTokenVaultB"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tokenAAta"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tokenBAta"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "userSharesAta"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "sharesMint"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "treasuryFeeTokenAVault"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "treasuryFeeTokenBVault"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tokenProgram"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "positionTokenAccount"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "poolProgram"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "instructionSysvarAccount"
        }
      ],
      "args": [
        {
          "name": "sharesAmount",
          "type": "u64"
        }
      ],
      "name": "withdraw"
    },
    {
      "accounts": [
        {
          "isMut": true,
          "isSigner": true,
          "name": "adminAuthority"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "strategy"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "globalConfig"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "pool"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "position"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "raydiumProtocolPositionOrBaseVaultAuthority"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "positionTokenAccount"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tickArrayLower"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tickArrayUpper"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tokenAVault"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tokenBVault"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "baseVaultAuthority"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "poolTokenVaultA"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "poolTokenVaultB"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tokenAMint"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tokenBMint"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "scopePrices"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tokenInfos"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tokenProgram"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "poolProgram"
        }
      ],
      "args": [
        {
          "name": "action",
          "type": "u8"
        }
      ],
      "name": "executiveWithdraw"
    },
    {
      "accounts": [
        {
          "isMut": true,
          "isSigner": true,
          "name": "user"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "strategy"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "globalConfig"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "baseVaultAuthority"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "pool"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tickArrayLower"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tickArrayUpper"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "position"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "raydiumProtocolPositionOrBaseVaultAuthority"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "positionTokenAccount"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tokenAVault"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "poolTokenVaultA"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tokenBVault"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "poolTokenVaultB"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "treasuryFeeTokenAVault"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "treasuryFeeTokenBVault"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "treasuryFeeVaultAuthority"
        },
        {
          "docs": [
            "If rewards are uninitialized, pass this as strategy."
          ],
          "isMut": true,
          "isSigner": false,
          "name": "reward0Vault"
        },
        {
          "docs": [
            "If rewards are uninitialized, pass this as strategy."
          ],
          "isMut": true,
          "isSigner": false,
          "name": "reward1Vault"
        },
        {
          "docs": [
            "If rewards are uninitialized, pass this as strategy."
          ],
          "isMut": true,
          "isSigner": false,
          "name": "reward2Vault"
        },
        {
          "docs": [
            "If rewards are uninitialized, pass this as strategy."
          ],
          "isMut": true,
          "isSigner": false,
          "name": "poolRewardVault0"
        },
        {
          "docs": [
            "If rewards are uninitialized, pass this as strategy."
          ],
          "isMut": true,
          "isSigner": false,
          "name": "poolRewardVault1"
        },
        {
          "docs": [
            "If rewards are uninitialized, pass this as strategy."
          ],
          "isMut": true,
          "isSigner": false,
          "name": "poolRewardVault2"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tokenAMint"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tokenBMint"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tokenProgram"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "poolProgram"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "instructionSysvarAccount"
        }
      ],
      "args": [],
      "name": "collectFeesAndRewards"
    },
    {
      "accounts": [
        {
          "isMut": true,
          "isSigner": true,
          "name": "user"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "strategy"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "globalConfig"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "pool"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tokenAVault"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tokenBVault"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "rewardVault"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "baseVaultAuthority"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "treasuryFeeTokenAVault"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "treasuryFeeTokenBVault"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "treasuryFeeVaultAuthority"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tokenAMint"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tokenBMint"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "userTokenAAta"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "userTokenBAta"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "userRewardTokenAccount"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "scopePrices"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tokenInfos"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "systemProgram"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tokenProgram"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "instructionSysvarAccount"
        }
      ],
      "args": [
        {
          "name": "tokenAIn",
          "type": "u64"
        },
        {
          "name": "tokenBIn",
          "type": "u64"
        },
        {
          "name": "rewardIndex",
          "type": "u64"
        },
        {
          "name": "rewardCollateralId",
          "type": "u64"
        },
        {
          "name": "minCollateralTokenOut",
          "type": "u64"
        }
      ],
      "name": "swapRewards"
    },
    {
      "accounts": [
        {
          "isMut": true,
          "isSigner": true,
          "name": "actionsAuthority"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "strategy"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "globalConfig"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tokenAVault"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tokenBVault"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "baseVaultAuthority"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "pool"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "position"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "raydiumPoolConfigOrBaseVaultAuthority"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "poolTokenVaultA"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "poolTokenVaultB"
        },
        {
          "docs": [
            "Payer must send this correctly."
          ],
          "isMut": true,
          "isSigner": false,
          "name": "tickArray0"
        },
        {
          "docs": [
            "Payer must send this correctly."
          ],
          "isMut": true,
          "isSigner": false,
          "name": "tickArray1"
        },
        {
          "docs": [
            "Payer must send this correctly."
          ],
          "isMut": true,
          "isSigner": false,
          "name": "tickArray2"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "oracle"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "poolProgram"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "scopePrices"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tokenInfos"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tokenProgram"
        }
      ],
      "args": [
        {
          "name": "targetLimitBps",
          "type": "u64"
        }
      ],
      "name": "swapUnevenVaults"
    },
    {
      "accounts": [
        {
          "isMut": true,
          "isSigner": true,
          "name": "user"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tokenAAta"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tokenBAta"
        }
      ],
      "args": [
        {
          "name": "tokenAAtaBalance",
          "type": "u64"
        },
        {
          "name": "tokenBAtaBalance",
          "type": "u64"
        }
      ],
      "name": "checkExpectedVaultsBalances"
    },
    {
      "accounts": [
        {
          "isMut": true,
          "isSigner": true,
          "name": "user"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "strategy"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "globalConfig"
        },
        {
          "docs": [
            "check that the pool is owned either by orca or by raydium"
          ],
          "isMut": true,
          "isSigner": false,
          "name": "pool"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "position"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "raydiumProtocolPositionOrBaseVaultAuthority"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "positionTokenAccount"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tokenAVault"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tokenBVault"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "poolTokenVaultA"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "poolTokenVaultB"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tickArrayLower"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tickArrayUpper"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "baseVaultAuthority"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tokenAAta"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tokenBAta"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tokenAMint"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tokenBMint"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "userSharesAta"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "sharesMint"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "sharesMintAuthority"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "scopePrices"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tokenInfos"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tokenProgram"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "poolProgram"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "instructionSysvarAccount"
        }
      ],
      "args": [
        {
          "name": "tokenAMinPostDepositBalance",
          "type": "u64"
        },
        {
          "name": "tokenBMinPostDepositBalance",
          "type": "u64"
        }
      ],
      "name": "singleTokenDepositAndInvestWithMin"
    },
    {
      "accounts": [
        {
          "isMut": true,
          "isSigner": true,
          "name": "user"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "strategy"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "globalConfig"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "pool"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "position"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tokenAVault"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tokenBVault"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "baseVaultAuthority"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tokenAAta"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tokenBAta"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tokenAMint"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tokenBMint"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "userSharesAta"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "sharesMint"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "sharesMintAuthority"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "scopePrices"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tokenInfos"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tokenProgram"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "instructionSysvarAccount"
        }
      ],
      "args": [
        {
          "name": "tokenAMinPostDepositBalance",
          "type": "u64"
        },
        {
          "name": "tokenBMinPostDepositBalance",
          "type": "u64"
        }
      ],
      "name": "singleTokenDepositWithMin"
    },
    {
      "accounts": [
        {
          "isMut": true,
          "isSigner": true,
          "name": "swapper"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "strategy"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "globalConfig"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tokenAVault"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tokenBVault"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tokenAAta"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tokenBAta"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "baseVaultAuthority"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "pool"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "position"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "scopePrices"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tokenInfos"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tokenProgram"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "instructionSysvarAccount"
        }
      ],
      "args": [
        {
          "name": "amount",
          "type": "u64"
        },
        {
          "name": "aToB",
          "type": "bool"
        }
      ],
      "docs": [
        "Start of a Flash swap uneven vaults.",
        "",
        "This needs to be the first instruction of the transaction or preceded only by a",
        "ComputeBudget.",
        "",
        "This ix has to be paired with a `flash_swap_uneven_vaults_end` (`FlashSwapUnevenVaultsEnd`)",
        "as the last instruction of the transaction. No other instruction targeted the program is",
        "allowed.",
        "The instructions between the start and end instructions are expected to perform the swap."
      ],
      "name": "flashSwapUnevenVaultsStart"
    },
    {
      "accounts": [
        {
          "isMut": true,
          "isSigner": true,
          "name": "swapper"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "strategy"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "globalConfig"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tokenAVault"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tokenBVault"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tokenAAta"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tokenBAta"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "baseVaultAuthority"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "pool"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "position"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "scopePrices"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tokenInfos"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tokenProgram"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "instructionSysvarAccount"
        }
      ],
      "args": [
        {
          "name": "minRepayAmount",
          "type": "u64"
        },
        {
          "name": "amountToLeaveToUser",
          "type": "u64"
        },
        {
          "name": "aToB",
          "type": "bool"
        }
      ],
      "docs": [
        "End of Flash swap uneven vaults.",
        "",
        "See [`flash_swap_uneven_vaults_start`] for details.",
        "",
        "Warning: This instruction is allowed to be used independently from",
        "`FlashSwapUnevenVaultsStart` and shall not perform any operation",
        "that can be exploited when used alone."
      ],
      "name": "flashSwapUnevenVaultsEnd"
    },
    {
      "accounts": [
        {
          "isMut": true,
          "isSigner": true,
          "name": "adminAuthority"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "strategy"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "globalConfig"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tokenAVault"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tokenBVault"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "baseVaultAuthority"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "pool"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "position"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "poolTokenVaultA"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "poolTokenVaultB"
        },
        {
          "docs": [
            "Payer must send this correctly."
          ],
          "isMut": true,
          "isSigner": false,
          "name": "tickArray0"
        },
        {
          "docs": [
            "Payer must send this correctly."
          ],
          "isMut": true,
          "isSigner": false,
          "name": "tickArray1"
        },
        {
          "docs": [
            "Payer must send this correctly."
          ],
          "isMut": true,
          "isSigner": false,
          "name": "tickArray2"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "oracle"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "poolProgram"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "scopePrices"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tokenInfos"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tokenProgram"
        }
      ],
      "args": [
        {
          "name": "aToB",
          "type": "bool"
        },
        {
          "name": "targetLimitBps",
          "type": "u64"
        }
      ],
      "name": "emergencySwap"
    },
    {
      "accounts": [
        {
          "isMut": true,
          "isSigner": true,
          "name": "adminAuthority"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "globalConfig"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "mint"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "treasuryFeeVault"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "treasuryFeeVaultAuthority"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "tokenAccount"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "systemProgram"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "rent"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tokenProgram"
        }
      ],
      "args": [
        {
          "name": "amount",
          "type": "u64"
        }
      ],
      "name": "withdrawFromTreasury"
    },
    {
      "accounts": [
        {
          "isMut": true,
          "isSigner": true,
          "name": "adminAuthority"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "strategy"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "oldPosition"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "baseVaultAuthority"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "globalConfig"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "newPool"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "poolProgram"
        }
      ],
      "args": [],
      "name": "changePool"
    },
    {
      "accounts": [
        {
          "isMut": true,
          "isSigner": true,
          "name": "adminAuthority"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "program"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "programData"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "closingAccount"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "systemProgram"
        }
      ],
      "args": [],
      "name": "closeProgramAccount"
    },
    {
      "accounts": [
        {
          "isMut": true,
          "isSigner": true,
          "name": "funder"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tokenProgram"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tokenAuthority"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "whirlpool"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tokenOwnerAccountA"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tokenVaultA"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tokenOwnerAccountB"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tokenVaultB"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tickArray0"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tickArray1"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "tickArray2"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "oracle"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "whirlpoolProgram"
        }
      ],
      "args": [
        {
          "name": "amount",
          "type": "u64"
        },
        {
          "name": "otherAmountThreshold",
          "type": "u64"
        },
        {
          "name": "sqrtPriceLimit",
          "type": "u128"
        },
        {
          "name": "amountSpecifiedIsInput",
          "type": "bool"
        },
        {
          "name": "aToB",
          "type": "bool"
        }
      ],
      "name": "orcaSwap"
    },
    {
      "accounts": [
        {
          "isMut": true,
          "isSigner": true,
          "name": "owner"
        },
        {
          "isMut": true,
          "isSigner": false,
          "name": "ownerSignatureState"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "systemProgram"
        },
        {
          "isMut": false,
          "isSigner": false,
          "name": "rent"
        }
      ],
      "args": [
        {
          "name": "signature",
          "type": {
            "array": [
              "u8",
              64
            ]
          }
        }
      ],
      "name": "signTerms"
    }
  ],
  "name": "yvaults",
  "types": [
    {
      "name": "PositionRewardInfo",
      "type": {
        "fields": [
          {
            "name": "growthInsideCheckpoint",
            "type": "u128"
          },
          {
            "name": "amountOwed",
            "type": "u64"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "WhirlpoolRewardInfo",
      "type": {
        "fields": [
          {
            "docs": [
              "Reward token mint."
            ],
            "name": "mint",
            "type": "publicKey"
          },
          {
            "docs": [
              "Reward vault token account."
            ],
            "name": "vault",
            "type": "publicKey"
          },
          {
            "docs": [
              "Authority account that has permission to initialize the reward and set emissions."
            ],
            "name": "authority",
            "type": "publicKey"
          },
          {
            "docs": [
              "Q64.64 number that indicates how many tokens per second are earned per unit of liquidity."
            ],
            "name": "emissionsPerSecondX64",
            "type": "u128"
          },
          {
            "docs": [
              "Q64.64 number that tracks the total tokens earned per unit of liquidity since the reward",
              "emissions were turned on."
            ],
            "name": "growthGlobalX64",
            "type": "u128"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "RewardInfo",
      "type": {
        "fields": [
          {
            "docs": [
              "Reward state"
            ],
            "name": "rewardState",
            "type": "u8"
          },
          {
            "docs": [
              "Reward open time"
            ],
            "name": "openTime",
            "type": "u64"
          },
          {
            "docs": [
              "Reward end time"
            ],
            "name": "endTime",
            "type": "u64"
          },
          {
            "docs": [
              "Reward last update time"
            ],
            "name": "lastUpdateTime",
            "type": "u64"
          },
          {
            "docs": [
              "Q64.64 number indicates how many tokens per second are earned per unit of liquidity."
            ],
            "name": "emissionsPerSecondX64",
            "type": "u128"
          },
          {
            "docs": [
              "The total amount of reward emissioned"
            ],
            "name": "rewardTotalEmissioned",
            "type": "u64"
          },
          {
            "docs": [
              "The total amount of claimed reward"
            ],
            "name": "rewardClaimed",
            "type": "u64"
          },
          {
            "docs": [
              "Reward token mint."
            ],
            "name": "tokenMint",
            "type": "publicKey"
          },
          {
            "docs": [
              "Reward vault token account."
            ],
            "name": "tokenVault",
            "type": "publicKey"
          },
          {
            "docs": [
              "The owner that has permission to set reward param"
            ],
            "name": "authority",
            "type": "publicKey"
          },
          {
            "docs": [
              "Q64.64 number that tracks the total tokens earned per unit of liquidity since the reward",
              "emissions were turned on."
            ],
            "name": "rewardGrowthGlobalX64",
            "type": "u128"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "RebalanceRaw",
      "type": {
        "fields": [
          {
            "name": "params",
            "type": {
              "array": [
                "u8",
                128
              ]
            }
          },
          {
            "name": "state",
            "type": {
              "array": [
                "u8",
                256
              ]
            }
          },
          {
            "name": "referencePriceType",
            "type": "u8"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "CollateralInfo",
      "type": {
        "fields": [
          {
            "name": "mint",
            "type": "publicKey"
          },
          {
            "name": "lowerHeuristic",
            "type": "u64"
          },
          {
            "name": "upperHeuristic",
            "type": "u64"
          },
          {
            "name": "expHeuristic",
            "type": "u64"
          },
          {
            "name": "maxTwapDivergenceBps",
            "type": "u64"
          },
          {
            "name": "scopeTwapPriceChain",
            "type": {
              "array": [
                "u16",
                4
              ]
            }
          },
          {
            "name": "scopePriceChain",
            "type": {
              "array": [
                "u16",
                4
              ]
            }
          },
          {
            "name": "name",
            "type": {
              "array": [
                "u8",
                32
              ]
            }
          },
          {
            "name": "maxAgePriceSeconds",
            "type": "u64"
          },
          {
            "name": "maxAgeTwapSeconds",
            "type": "u64"
          },
          {
            "name": "maxIgnorableAmountAsReward",
            "type": "u64"
          },
          {
            "name": "disabled",
            "type": "u8"
          },
          {
            "name": "padding0",
            "type": {
              "array": [
                "u8",
                7
              ]
            }
          },
          {
            "name": "scopeStakingRateChain",
            "type": {
              "array": [
                "u16",
                4
              ]
            }
          },
          {
            "name": "padding",
            "type": {
              "array": [
                "u64",
                8
              ]
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "KaminoRewardInfo",
      "type": {
        "fields": [
          {
            "name": "decimals",
            "type": "u64"
          },
          {
            "name": "rewardVault",
            "type": "publicKey"
          },
          {
            "name": "rewardMint",
            "type": "publicKey"
          },
          {
            "name": "rewardCollateralId",
            "type": "u64"
          },
          {
            "name": "lastIssuanceTs",
            "type": "u64"
          },
          {
            "name": "rewardPerSecond",
            "type": "u64"
          },
          {
            "name": "amountUncollected",
            "type": "u64"
          },
          {
            "name": "amountIssuedCumulative",
            "type": "u64"
          },
          {
            "name": "amountAvailable",
            "type": "u64"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "WithdrawalCaps",
      "type": {
        "fields": [
          {
            "name": "configCapacity",
            "type": "i64"
          },
          {
            "name": "currentTotal",
            "type": "i64"
          },
          {
            "name": "lastIntervalStartTimestamp",
            "type": "u64"
          },
          {
            "name": "configIntervalLengthSeconds",
            "type": "u64"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "Price",
      "type": {
        "fields": [
          {
            "name": "value",
            "type": "u64"
          },
          {
            "name": "exp",
            "type": "u64"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "WithdrawalCapAccumulatorAction",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "KeepAccumulator"
          },
          {
            "name": "ResetAccumulator"
          }
        ]
      }
    },
    {
      "name": "RebalanceEffects",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "fields": [
              "i32",
              "i32"
            ],
            "name": "NewRange"
          },
          {
            "name": "WithdrawAndFreeze"
          }
        ]
      }
    },
    {
      "name": "SwapLimit",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "fields": [
              "u64"
            ],
            "name": "Bps"
          },
          {
            "fields": [
              {
                "docs": [
                  "Amount of src token expected by the user to perform the swap"
                ],
                "name": "src_amount_to_swap",
                "type": "u64"
              },
              {
                "docs": [
                  "Amount of dst token the user provides in exchange"
                ],
                "name": "dst_amount_to_vault",
                "type": "u64"
              },
              {
                "name": "a_to_b",
                "type": "bool"
              }
            ],
            "name": "Absolute"
          }
        ]
      }
    },
    {
      "name": "MintingMethod",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "PriceBased"
          },
          {
            "name": "Proportional"
          }
        ]
      }
    },
    {
      "name": "GlobalConfigOption",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "EmergencyMode"
          },
          {
            "name": "BlockDeposit"
          },
          {
            "name": "BlockInvest"
          },
          {
            "name": "BlockWithdraw"
          },
          {
            "name": "BlockCollectFees"
          },
          {
            "name": "BlockCollectRewards"
          },
          {
            "name": "BlockSwapRewards"
          },
          {
            "name": "BlockSwapUnevenVaults"
          },
          {
            "name": "FeesBps"
          },
          {
            "name": "SwapDiscountBps"
          },
          {
            "name": "ActionsAuthority"
          },
          {
            "name": "TreasuryFeeVaults"
          },
          {
            "name": "AdminAuthority"
          },
          {
            "name": "BlockEmergencySwap"
          },
          {
            "name": "BlockLocalAdmin"
          },
          {
            "name": "UpdateTokenInfos"
          },
          {
            "name": "ScopeProgramId"
          },
          {
            "name": "ScopePriceId"
          },
          {
            "name": "MinPerformanceFeeBps"
          }
        ]
      }
    },
    {
      "name": "StrategyConfigOption",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "UpdateDepositCap"
          },
          {
            "name": "UpdateDepositCapIxn"
          },
          {
            "name": "UpdateWithdrawalCapACapacity"
          },
          {
            "name": "UpdateWithdrawalCapAInterval"
          },
          {
            "name": "UpdateWithdrawalCapACurrentTotal"
          },
          {
            "name": "UpdateWithdrawalCapBCapacity"
          },
          {
            "name": "UpdateWithdrawalCapBInterval"
          },
          {
            "name": "UpdateWithdrawalCapBCurrentTotal"
          },
          {
            "name": "UpdateMaxDeviationBps"
          },
          {
            "name": "UpdateSwapVaultMaxSlippage"
          },
          {
            "name": "UpdateStrategyType"
          },
          {
            "name": "UpdateDepositFee"
          },
          {
            "name": "UpdateWithdrawFee"
          },
          {
            "name": "UpdateCollectFeesFee"
          },
          {
            "name": "UpdateReward0Fee"
          },
          {
            "name": "UpdateReward1Fee"
          },
          {
            "name": "UpdateReward2Fee"
          },
          {
            "name": "UpdateAdminAuthority"
          },
          {
            "name": "KaminoRewardIndex0TS"
          },
          {
            "name": "KaminoRewardIndex1TS"
          },
          {
            "name": "KaminoRewardIndex2TS"
          },
          {
            "name": "KaminoRewardIndex0RewardPerSecond"
          },
          {
            "name": "KaminoRewardIndex1RewardPerSecond"
          },
          {
            "name": "KaminoRewardIndex2RewardPerSecond"
          },
          {
            "name": "UpdateDepositBlocked"
          },
          {
            "name": "UpdateRaydiumProtocolPositionOrBaseVaultAuthority"
          },
          {
            "name": "UpdateRaydiumPoolConfigOrBaseVaultAuthority"
          },
          {
            "name": "UpdateInvestBlocked"
          },
          {
            "name": "UpdateWithdrawBlocked"
          },
          {
            "name": "UpdateLocalAdminBlocked"
          },
          {
            "name": "UpdateCollateralIdA"
          },
          {
            "name": "UpdateCollateralIdB"
          },
          {
            "name": "UpdateFlashVaultSwap"
          },
          {
            "name": "AllowDepositWithoutInvest"
          },
          {
            "name": "UpdateSwapVaultMaxSlippageFromRef"
          },
          {
            "name": "ResetReferencePrices"
          },
          {
            "name": "UpdateStrategyCreationState"
          },
          {
            "name": "UpdateIsCommunity"
          },
          {
            "name": "UpdateRebalanceType"
          },
          {
            "name": "UpdateRebalanceParams"
          },
          {
            "name": "UpdateDepositMintingMethod"
          },
          {
            "name": "UpdateLookupTable"
          },
          {
            "name": "UpdateReferencePriceType"
          },
          {
            "name": "UpdateReward0Amount"
          },
          {
            "name": "UpdateReward1Amount"
          },
          {
            "name": "UpdateReward2Amount"
          }
        ]
      }
    },
    {
      "name": "StrategyStatus",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Uninitialized"
          },
          {
            "name": "Active"
          },
          {
            "name": "Frozen"
          },
          {
            "name": "Rebalancing"
          },
          {
            "name": "NoPosition"
          }
        ]
      }
    },
    {
      "name": "StrategyType",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Stable"
          },
          {
            "name": "Pegged"
          },
          {
            "name": "Volatile"
          }
        ]
      }
    },
    {
      "name": "CreationStatus",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "IGNORED"
          },
          {
            "name": "SHADOW"
          },
          {
            "name": "LIVE"
          },
          {
            "name": "DEPRECATED"
          },
          {
            "name": "STAGING"
          }
        ]
      }
    },
    {
      "name": "ExecutiveWithdrawAction",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Freeze"
          },
          {
            "name": "Unfreeze"
          },
          {
            "name": "Rebalance"
          }
        ]
      }
    },
    {
      "name": "ReferencePriceType",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "POOL"
          },
          {
            "name": "TWAP"
          }
        ]
      }
    },
    {
      "name": "LiquidityCalculationMode",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Deposit"
          },
          {
            "name": "Withdraw"
          }
        ]
      }
    },
    {
      "name": "UpdateCollateralInfoMode",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "CollateralId"
          },
          {
            "name": "LowerHeuristic"
          },
          {
            "name": "UpperHeuristic"
          },
          {
            "name": "ExpHeuristic"
          },
          {
            "name": "TwapDivergence"
          },
          {
            "name": "UpdateScopeTwap"
          },
          {
            "name": "UpdateScopeChain"
          },
          {
            "name": "UpdateName"
          },
          {
            "name": "UpdatePriceMaxAge"
          },
          {
            "name": "UpdateTwapMaxAge"
          },
          {
            "name": "UpdateDisabled"
          },
          {
            "name": "UpdateStakingRateChain"
          }
        ]
      }
    },
    {
      "name": "BalanceStatus",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Balanced"
          },
          {
            "name": "Unbalanced"
          }
        ]
      }
    },
    {
      "name": "RebalanceAutodriftStep",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Uninitialized"
          },
          {
            "name": "Autodrifting"
          }
        ]
      }
    },
    {
      "name": "StakingRateSource",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Constant"
          },
          {
            "name": "Scope"
          }
        ]
      }
    },
    {
      "name": "DriftDirection",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Increasing"
          },
          {
            "name": "Decreasing"
          }
        ]
      }
    },
    {
      "name": "RebalanceDriftStep",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Uninitialized"
          },
          {
            "name": "Drifting"
          }
        ]
      }
    },
    {
      "name": "ExpanderStep",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "fields": [
              "u16"
            ],
            "name": "ExpandOrContract"
          },
          {
            "name": "Recenter"
          }
        ]
      }
    },
    {
      "name": "RebalanceTakeProfitToken",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "A"
          },
          {
            "name": "B"
          }
        ]
      }
    },
    {
      "name": "RebalanceTakeProfitStep",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Uninitialized"
          },
          {
            "name": "TakingProfit"
          },
          {
            "name": "Finished"
          }
        ]
      }
    },
    {
      "name": "RebalanceAction",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "fields": [
              "u128",
              "u128"
            ],
            "name": "NewSqrtPriceRange"
          },
          {
            "fields": [
              "i32",
              "i32"
            ],
            "name": "NewTickRange"
          },
          {
            "name": "WithdrawAndFreeze"
          }
        ]
      }
    },
    {
      "name": "RebalanceType",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Manual"
          },
          {
            "name": "PricePercentage"
          },
          {
            "name": "PricePercentageWithReset"
          },
          {
            "name": "Drift"
          },
          {
            "name": "TakeProfit"
          },
          {
            "name": "PeriodicRebalance"
          },
          {
            "name": "Expander"
          },
          {
            "name": "Autodrift"
          }
        ]
      }
    },
    {
      "name": "CollateralTestToken",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "USDC"
          },
          {
            "name": "USDH"
          },
          {
            "name": "SOL"
          },
          {
            "name": "ETH"
          },
          {
            "name": "BTC"
          },
          {
            "name": "MSOL"
          },
          {
            "name": "STSOL"
          },
          {
            "name": "USDT"
          },
          {
            "name": "ORCA"
          },
          {
            "name": "MNDE"
          },
          {
            "name": "HBB"
          },
          {
            "name": "JSOL"
          },
          {
            "name": "USH"
          },
          {
            "name": "DAI"
          },
          {
            "name": "LDO"
          },
          {
            "name": "SCNSOL"
          },
          {
            "name": "UXD"
          },
          {
            "name": "HDG"
          },
          {
            "name": "DUST"
          },
          {
            "name": "USDR"
          },
          {
            "name": "RATIO"
          },
          {
            "name": "UXP"
          },
          {
            "name": "JITOSOL"
          },
          {
            "name": "RAY"
          },
          {
            "name": "BONK"
          },
          {
            "name": "SAMO"
          },
          {
            "name": "LaineSOL"
          },
          {
            "name": "BSOL"
          }
        ]
      }
    },
    {
      "name": "ScopePriceIdTest",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "SOL"
          },
          {
            "name": "ETH"
          },
          {
            "name": "BTC"
          },
          {
            "name": "SRM"
          },
          {
            "name": "RAY"
          },
          {
            "name": "FTT"
          },
          {
            "name": "MSOL"
          },
          {
            "name": "scnSOL_SOL"
          },
          {
            "name": "BNB"
          },
          {
            "name": "AVAX"
          },
          {
            "name": "DaoSOL_SOL"
          },
          {
            "name": "SaberMSOL_SOL"
          },
          {
            "name": "USDH"
          },
          {
            "name": "StSOL"
          },
          {
            "name": "CSOL_SOL"
          },
          {
            "name": "CETH_ETH"
          },
          {
            "name": "CBTC_BTC"
          },
          {
            "name": "CMSOL_SOL"
          },
          {
            "name": "wstETH"
          },
          {
            "name": "LDO"
          },
          {
            "name": "USDC"
          },
          {
            "name": "CUSDC_USDC"
          },
          {
            "name": "USDT"
          },
          {
            "name": "ORCA"
          },
          {
            "name": "MNDE"
          },
          {
            "name": "HBB"
          },
          {
            "name": "CORCA_ORCA"
          },
          {
            "name": "CSLND_SLND"
          },
          {
            "name": "CSRM_SRM"
          },
          {
            "name": "CRAY_RAY"
          },
          {
            "name": "CFTT_FTT"
          },
          {
            "name": "CSTSOL_STSOL"
          },
          {
            "name": "SLND"
          },
          {
            "name": "DAI"
          },
          {
            "name": "JSOL_SOL"
          },
          {
            "name": "USH"
          },
          {
            "name": "UXD"
          },
          {
            "name": "USDH_TWAP"
          },
          {
            "name": "USH_TWAP"
          },
          {
            "name": "UXD_TWAP"
          },
          {
            "name": "HDG"
          },
          {
            "name": "DUST"
          },
          {
            "name": "USDR"
          },
          {
            "name": "USDR_TWAP"
          },
          {
            "name": "RATIO"
          },
          {
            "name": "UXP"
          },
          {
            "name": "KUXDUSDCORCA"
          },
          {
            "name": "JITOSOL_SOL"
          },
          {
            "name": "SOL_EMA"
          },
          {
            "name": "ETH_EMA"
          },
          {
            "name": "BTC_EMA"
          },
          {
            "name": "SRM_EMA"
          },
          {
            "name": "RAY_EMA"
          },
          {
            "name": "FTT_EMA"
          },
          {
            "name": "MSOL_EMA"
          },
          {
            "name": "BNB_EMA"
          },
          {
            "name": "AVAX_EMA"
          },
          {
            "name": "STSOL_EMA"
          },
          {
            "name": "USDC_EMA"
          },
          {
            "name": "USDT_EMA"
          },
          {
            "name": "SLND_EMA"
          },
          {
            "name": "DAI_EMA"
          },
          {
            "name": "wstETH_TWAP"
          },
          {
            "name": "DUST_TWAP"
          },
          {
            "name": "BONK"
          },
          {
            "name": "BONK_TWAP"
          },
          {
            "name": "SAMO"
          },
          {
            "name": "SAMO_TWAP"
          },
          {
            "name": "BSOL"
          },
          {
            "name": "LaineSOL"
          }
        ]
      }
    },
    {
      "name": "DEX",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Orca"
          },
          {
            "name": "Raydium"
          }
        ]
      }
    }
  ],
  "version": "0.1.0"
}